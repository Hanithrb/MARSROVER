g = 3.711 # m/s^2, gravity on Mars

function simulate(X0, V0, land, landing_site; 
                  fuel=200, dt=0.1, Nstep=1000, 
                  autopilot=nothing, print_interval=100)
    
    n = length(X0)       # number of degrees of freedom (2 here)
    X = copy(X0)         # current position
    V = copy(V0)         # current velocity
    Xs = zeros(Nstep, n)     # position history (trajectory) 
    Vs = zeros(Nstep, n)     # velocity history
    thrust = zeros(Nstep, n) # thrust history
    success = false
    fuel_warning_printed = false
    rotate = 0           # degrees, initial angle
    power = 0            # m/s^2, initial thrust power    
    
    for i = 1:Nstep
        Xs[i, :] = X     # Store positions
        Vs[i, :] = V     # Store velocities
        
        if autopilot != nothing
            # call user-supplied function to set `rotate` and `power`
            rotate, power = autopilot(i, X, V, fuel, rotate, power)
            @assert abs(rotate) <= 90
            @assert 0 <= power <= 4
        
            rotate_rad = rotate*π/180.0 # degrees to radians
            thrust[i, :] = power*[sin(rotate), cos(rotate)]
            if fuel <= 0 
                if !fuel_warning_printed
                    println("Fuel empty! Setting thrust to zero")
                    fuel_warning_printed = true
                end
                thrust[i, :] = 0
            else
                fuel -= power*dt
            end
        end
        
        A = [0, -g] .+ thrust[i, :] # acceleration
        V += A * dt                 # update velocities
        X += V * dt                 # update positions
        
        if i % print_interval == 0 
            @printf("i=%03d X=[%8.3f %8.3f] V=[%8.3f %8.3f] thrust=[%8.3f %8.3f] fuel=%8.3f\n", 
                     i, X[1], X[2], V[1], V[2], thrust[i, 1], thrust[i, 2], fuel)
        end
        
        # check for safe or crash landing
        if (X[2] < interpolate_surface(land, X[1]))
            if !(land[landing_site, 1] <= X[1] <= land[landing_site+1, 1])
                println("crash! did jot land on flat ground!")
            elseif rotate != 0 
                println("crash! did not land in a vertical position (tilt angle = 0 degrees)")
            elseif abs(V[2]) >= 40 
                println("crash! vertical speed must be limited (<40m/s in absolute value), got ", abs(V[2]))
            elseif abs(V[1]) >= 20
                println("crash! horizontal speed must be limited (<20m/s in absolute value), got ", abs(V[1]))
            else
                println("safe landing - well done!")
                success = true
            end
            Nstep = i
            break
        end
    end
    return Xs[1:Nstep,:], Vs[1:Nstep,:], thrust[1:Nstep,:], success
end
